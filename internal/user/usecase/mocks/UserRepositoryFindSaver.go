// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/edwintantawi/taskit/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryFindSaver is an autogenerated mock type for the UserRepositoryFindSaver type
type UserRepositoryFindSaver struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepositoryFindSaver) FindByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, newUser
func (_m *UserRepositoryFindSaver) Save(ctx context.Context, newUser entity.NewUser) (entity.AddedUser, error) {
	ret := _m.Called(ctx, newUser)

	var r0 entity.AddedUser
	if rf, ok := ret.Get(0).(func(context.Context, entity.NewUser) entity.AddedUser); ok {
		r0 = rf(ctx, newUser)
	} else {
		r0 = ret.Get(0).(entity.AddedUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.NewUser) error); ok {
		r1 = rf(ctx, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepositoryFindSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryFindSaver creates a new instance of UserRepositoryFindSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryFindSaver(t mockConstructorTestingTNewUserRepositoryFindSaver) *UserRepositoryFindSaver {
	mock := &UserRepositoryFindSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
