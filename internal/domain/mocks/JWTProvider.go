// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// JWTProvider is an autogenerated mock type for the JWTProvider type
type JWTProvider struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: payload
func (_m *JWTProvider) GenerateAccessToken(payload map[string]interface{}) (string, time.Time, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(map[string]interface{}) time.Time); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(map[string]interface{}) error); ok {
		r2 = rf(payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateRefreshToken provides a mock function with given fields: payload
func (_m *JWTProvider) GenerateRefreshToken(payload map[string]interface{}) (string, time.Time, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(map[string]interface{}) time.Time); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(map[string]interface{}) error); ok {
		r2 = rf(payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewJWTProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWTProvider creates a new instance of JWTProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWTProvider(t mockConstructorTestingTNewJWTProvider) *JWTProvider {
	mock := &JWTProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
