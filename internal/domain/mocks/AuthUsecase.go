// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/edwintantawi/taskit/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// GetProfile provides a mock function with given fields: ctx, payload
func (_m *AuthUsecase) GetProfile(ctx context.Context, payload *dto.AuthProfileIn) (dto.AuthProfileOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.AuthProfileOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthProfileIn) dto.AuthProfileOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.AuthProfileOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.AuthProfileIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, payload
func (_m *AuthUsecase) Login(ctx context.Context, payload *dto.AuthLoginIn) (dto.AuthLoginOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.AuthLoginOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthLoginIn) dto.AuthLoginOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.AuthLoginOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.AuthLoginIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, payload
func (_m *AuthUsecase) Logout(ctx context.Context, payload *dto.AuthLogoutIn) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthLogoutIn) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, payload
func (_m *AuthUsecase) Refresh(ctx context.Context, payload *dto.AuthRefreshIn) (dto.AuthRefreshOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.AuthRefreshOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthRefreshIn) dto.AuthRefreshOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.AuthRefreshOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.AuthRefreshIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUsecase(t mockConstructorTestingTNewAuthUsecase) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
