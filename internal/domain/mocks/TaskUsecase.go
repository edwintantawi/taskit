// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/edwintantawi/taskit/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Create(ctx context.Context, payload *dto.TaskCreateIn) (dto.TaskCreateOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.TaskCreateOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TaskCreateIn) dto.TaskCreateOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.TaskCreateOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TaskCreateIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) GetAll(ctx context.Context, payload *dto.TaskGetAllIn) ([]dto.TaskGetAllOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 []dto.TaskGetAllOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TaskGetAllIn) []dto.TaskGetAllOut); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TaskGetAllOut)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TaskGetAllIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) GetByID(ctx context.Context, payload *dto.TaskGetByIDIn) (dto.TaskGetByIDOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.TaskGetByIDOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TaskGetByIDIn) dto.TaskGetByIDOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.TaskGetByIDOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TaskGetByIDIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Remove(ctx context.Context, payload *dto.TaskRemoveIn) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TaskRemoveIn) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Update(ctx context.Context, payload *dto.TaskUpdateIn) (dto.TaskUpdateOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.TaskUpdateOut
	if rf, ok := ret.Get(0).(func(context.Context, *dto.TaskUpdateIn) dto.TaskUpdateOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.TaskUpdateOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.TaskUpdateIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskUsecase(t mockConstructorTestingTNewTaskUsecase) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
