// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/edwintantawi/taskit/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Create(ctx context.Context, payload *domain.CreateTaskIn) (domain.CreateTaskOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 domain.CreateTaskOut
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateTaskIn) domain.CreateTaskOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(domain.CreateTaskOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateTaskIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) GetAll(ctx context.Context, payload *domain.GetAllTaskIn) ([]domain.GetAllTaskOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 []domain.GetAllTaskOut
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetAllTaskIn) []domain.GetAllTaskOut); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.GetAllTaskOut)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetAllTaskIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) GetByID(ctx context.Context, payload *domain.GetTaskByIDIn) (domain.GetTaskByIDOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 domain.GetTaskByIDOut
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetTaskByIDIn) domain.GetTaskByIDOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(domain.GetTaskByIDOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetTaskByIDIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Remove(ctx context.Context, payload *domain.RemoveTaskIn) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RemoveTaskIn) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, payload
func (_m *TaskUsecase) Update(ctx context.Context, payload *domain.UpdateTaskIn) (domain.UpdateTaskOut, error) {
	ret := _m.Called(ctx, payload)

	var r0 domain.UpdateTaskOut
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateTaskIn) domain.UpdateTaskOut); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(domain.UpdateTaskOut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UpdateTaskIn) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskUsecase(t mockConstructorTestingTNewTaskUsecase) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
