// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/edwintantawi/taskit/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: ctx, taskID
func (_m *TaskRepository) DeleteByID(ctx context.Context, taskID entity.TaskID) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TaskID) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByUserID provides a mock function with given fields: ctx, userID
func (_m *TaskRepository) FindAllByUserID(ctx context.Context, userID entity.UserID) ([]entity.Task, error) {
	ret := _m.Called(ctx, userID)

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserID) []entity.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, taskID
func (_m *TaskRepository) FindByID(ctx context.Context, taskID entity.TaskID) (entity.Task, error) {
	ret := _m.Called(ctx, taskID)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, entity.TaskID) entity.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.TaskID) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, t
func (_m *TaskRepository) Store(ctx context.Context, t *entity.Task) (entity.TaskID, error) {
	ret := _m.Called(ctx, t)

	var r0 entity.TaskID
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) entity.TaskID); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(entity.TaskID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Task) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, t
func (_m *TaskRepository) Update(ctx context.Context, t *entity.Task) (entity.TaskID, error) {
	ret := _m.Called(ctx, t)

	var r0 entity.TaskID
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) entity.TaskID); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(entity.TaskID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Task) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyAvailableByID provides a mock function with given fields: ctx, taskID
func (_m *TaskRepository) VerifyAvailableByID(ctx context.Context, taskID entity.TaskID) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TaskID) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
