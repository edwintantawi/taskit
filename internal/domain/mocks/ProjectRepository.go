// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/edwintantawi/taskit/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// FindAllByUserID provides a mock function with given fields: ctx, userID
func (_m *ProjectRepository) FindAllByUserID(ctx context.Context, userID entity.UserID) ([]entity.Project, error) {
	ret := _m.Called(ctx, userID)

	var r0 []entity.Project
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserID) []entity.Project); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, p
func (_m *ProjectRepository) Store(ctx context.Context, p *entity.Project) (entity.ProjectID, error) {
	ret := _m.Called(ctx, p)

	var r0 entity.ProjectID
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Project) entity.ProjectID); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(entity.ProjectID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Project) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProjectRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectRepository(t mockConstructorTestingTNewProjectRepository) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
