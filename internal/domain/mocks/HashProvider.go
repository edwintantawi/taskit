// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HashProvider is an autogenerated mock type for the HashProvider type
type HashProvider struct {
	mock.Mock
}

// Compare provides a mock function with given fields: raw, hashed
func (_m *HashProvider) Compare(raw string, hashed string) error {
	ret := _m.Called(raw, hashed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(raw, hashed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hash provides a mock function with given fields: raw
func (_m *HashProvider) Hash(raw string) ([]byte, error) {
	ret := _m.Called(raw)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(raw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHashProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewHashProvider creates a new instance of HashProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHashProvider(t mockConstructorTestingTNewHashProvider) *HashProvider {
	mock := &HashProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
